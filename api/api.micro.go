// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: api.proto

package v1

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for Admin service

type AdminService interface {
	PushMsg(ctx context.Context, in *PushMsgReq, opts ...client.CallOption) (*PushMsgReply, error)
	TakeWorking(ctx context.Context, in *Request, opts ...client.CallOption) (*Response, error)
}

type adminService struct {
	c    client.Client
	name string
}

func NewAdminService(name string, c client.Client) AdminService {
	if c == nil {
		c = client.NewClient()
	}
	if len(name) == 0 {
		name = "admin"
	}
	return &adminService{
		c:    c,
		name: name,
	}
}

func (c *adminService) PushMsg(ctx context.Context, in *PushMsgReq, opts ...client.CallOption) (*PushMsgReply, error) {
	req := c.c.NewRequest(c.name, "Admin.PushMsg", in)
	out := new(PushMsgReply)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminService) TakeWorking(ctx context.Context, in *Request, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "Admin.TakeWorking", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Admin service

type AdminHandler interface {
	PushMsg(context.Context, *PushMsgReq, *PushMsgReply) error
	TakeWorking(context.Context, *Request, *Response) error
}

func RegisterAdminHandler(s server.Server, hdlr AdminHandler, opts ...server.HandlerOption) error {
	type admin interface {
		PushMsg(ctx context.Context, in *PushMsgReq, out *PushMsgReply) error
		TakeWorking(ctx context.Context, in *Request, out *Response) error
	}
	type Admin struct {
		admin
	}
	h := &adminHandler{hdlr}
	return s.Handle(s.NewHandler(&Admin{h}, opts...))
}

type adminHandler struct {
	AdminHandler
}

func (h *adminHandler) PushMsg(ctx context.Context, in *PushMsgReq, out *PushMsgReply) error {
	return h.AdminHandler.PushMsg(ctx, in, out)
}

func (h *adminHandler) TakeWorking(ctx context.Context, in *Request, out *Response) error {
	return h.AdminHandler.TakeWorking(ctx, in, out)
}

// Client API for Action service

type ActionService interface {
	Action(ctx context.Context, in *Request, opts ...client.CallOption) (*Response, error)
}

type actionService struct {
	c    client.Client
	name string
}

func NewActionService(name string, c client.Client) ActionService {
	if c == nil {
		c = client.NewClient()
	}
	if len(name) == 0 {
		name = "action"
	}
	return &actionService{
		c:    c,
		name: name,
	}
}

func (c *actionService) Action(ctx context.Context, in *Request, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "Action.Action", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Action service

type ActionHandler interface {
	Action(context.Context, *Request, *Response) error
}

func RegisterActionHandler(s server.Server, hdlr ActionHandler, opts ...server.HandlerOption) error {
	type action interface {
		Action(ctx context.Context, in *Request, out *Response) error
	}
	type Action struct {
		action
	}
	h := &actionHandler{hdlr}
	return s.Handle(s.NewHandler(&Action{h}, opts...))
}

type actionHandler struct {
	ActionHandler
}

func (h *actionHandler) Action(ctx context.Context, in *Request, out *Response) error {
	return h.ActionHandler.Action(ctx, in, out)
}

// Client API for Model service

type ModelService interface {
	Model(ctx context.Context, in *Request, opts ...client.CallOption) (*Response, error)
}

type modelService struct {
	c    client.Client
	name string
}

func NewModelService(name string, c client.Client) ModelService {
	if c == nil {
		c = client.NewClient()
	}
	if len(name) == 0 {
		name = "model"
	}
	return &modelService{
		c:    c,
		name: name,
	}
}

func (c *modelService) Model(ctx context.Context, in *Request, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "Model.Model", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Model service

type ModelHandler interface {
	Model(context.Context, *Request, *Response) error
}

func RegisterModelHandler(s server.Server, hdlr ModelHandler, opts ...server.HandlerOption) error {
	type model interface {
		Model(ctx context.Context, in *Request, out *Response) error
	}
	type Model struct {
		model
	}
	h := &modelHandler{hdlr}
	return s.Handle(s.NewHandler(&Model{h}, opts...))
}

type modelHandler struct {
	ModelHandler
}

func (h *modelHandler) Model(ctx context.Context, in *Request, out *Response) error {
	return h.ModelHandler.Model(ctx, in, out)
}
