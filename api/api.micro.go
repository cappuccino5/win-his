// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: api.proto

package v1

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for SagaAdmin service

type SagaAdminService interface {
	PushMsg(ctx context.Context, in *PushMsgReq, opts ...client.CallOption) (*PushMsgReply, error)
}

type sagaAdminService struct {
	c    client.Client
	name string
}

func NewSagaAdminService(name string, c client.Client) SagaAdminService {
	if c == nil {
		c = client.NewClient()
	}
	if len(name) == 0 {
		name = "http"
	}
	return &sagaAdminService{
		c:    c,
		name: name,
	}
}

func (c *sagaAdminService) PushMsg(ctx context.Context, in *PushMsgReq, opts ...client.CallOption) (*PushMsgReply, error) {
	req := c.c.NewRequest(c.name, "SagaAdmin.PushMsg", in)
	out := new(PushMsgReply)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for SagaAdmin service

type SagaAdminHandler interface {
	PushMsg(context.Context, *PushMsgReq, *PushMsgReply) error
}

func RegisterSagaAdminHandler(s server.Server, hdlr SagaAdminHandler, opts ...server.HandlerOption) error {
	type sagaAdmin interface {
		PushMsg(ctx context.Context, in *PushMsgReq, out *PushMsgReply) error
	}
	type SagaAdmin struct {
		sagaAdmin
	}
	h := &sagaAdminHandler{hdlr}
	return s.Handle(s.NewHandler(&SagaAdmin{h}, opts...))
}

type sagaAdminHandler struct {
	SagaAdminHandler
}

func (h *sagaAdminHandler) PushMsg(ctx context.Context, in *PushMsgReq, out *PushMsgReply) error {
	return h.SagaAdminHandler.PushMsg(ctx, in, out)
}
